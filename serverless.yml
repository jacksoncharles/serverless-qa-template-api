# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: forum-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
# you can overwrite defaults here
  stage: prod
  region: eu-west-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"
  environment:
    DYNAMODB_REPLY_TABLE: Reply
    DYNAMODB_THREAD_TABLE: Thread
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"
      
functions:

  replyCreate:
    handler: api/replies/create.create
    memorySize: 128
    description: Submit post information.
    events:
      - http: 
          path: replies
          method: post
          cors: true

  replyList:
    handler: api/replies/replyList.replyList
    memorySize: 128
    description: Retrieve a paginated list of replies by the value of Id
    events:
      - http:
          path: replies
          method: get
          cors: true

  replyUpdate:
    handler: api/replies/update.update
    events:
      - http:
          path: replies/{id}
          method: put
          cors: true

  replyGet:
    handler: api/replies/get.get
    events:
      - http:
          path: replies/{id}
          method: get
          cors: true

  replyDelete:
    handler: api/replies/delete.delete
    events:
      - http:
          path: replies/{id}
          method: delete
          cors: true

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

#functions:
#  hello:
#    handler: handler.hello

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    ThreadDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "Id"
            AttributeType: "S"
          -
            AttributeName: "UserId"
            AttributeType: "S"
          -
            AttributeName: "Message"
            AttributeType: "S"
          -
            AttributeName: "ThreadDateTime"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "Id"
            KeyType: "HASH"
          -
            AttributeName: "ThreadDateTime"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          -
            IndexName: Thread-UserId-Message-Index
            KeySchema:
              -
                AttributeName: "UserId"
                KeyType: HASH
              -
                AttributeName: "Message"
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: Thread
    ReplyDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "Id"
            AttributeType: "S"
          -
            AttributeName: "ThreadId"
            AttributeType: "S"
          -
            AttributeName: "UserId"
            AttributeType: "S"
          -
            AttributeName: "ReplyDateTime"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "Id"
            KeyType: "HASH"
          -
            AttributeName: "ReplyDateTime"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          -
            IndexName: ThreadIndex
            KeySchema:
              -
                AttributeName: "ThreadId"
                KeyType: HASH
              -
                AttributeName: "ReplyDateTime"
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          -
            IndexName: UserIndex
            KeySchema:
              -
                AttributeName: "UserId"
                KeyType: HASH
              -
                AttributeName: "ReplyDateTime"
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: Reply