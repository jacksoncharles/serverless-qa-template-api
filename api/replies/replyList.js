'use strict';

const AWS = require('aws-sdk');
const dynamoDb = new AWS.DynamoDB.DocumentClient();

var ReplyQueryBuilder = require("./../_classes/ReplyQueryBuilder");

/**
 * Handler for the lambda function.
 * 
 * @param  {Object}        event -          AWS Lambda uses this parameter to pass in event data to the handler.
 * @param  {Object}        context -        AWS Lambda uses this parameter to provide your handler the runtime information of the Lambda function that is executing. 
 * @param  {Function}      callback -      Optional parameter used to pass a callback
 * 
 * @return JSON    JSON encoded response.
 */
module.exports.replyList = (event, context, callback) => {

    /**
     * Instantiate an instance of QueryBuilder
     * 
     * @type {QueryBuilder}
     */
    let Query = new ReplyQueryBuilder( event.queryStringParameters );

    if ( Query.validates() ) {

        Query
        .buildThreadIndex()
        .buildUserIndex()
        .buildPagination()
        .buildLimit();

        /** Run a dynamoDb query passing-in Query.parameters  */
        dynamoDb.query( Query.parameters, function( error, data ) {

            /** Handle potential dynamoDb errors */
            if (error) {

                console.log('=== dynamodb validation error ===', JSON.stringify( error ));
                callback(null, JSON.stringify( error ) );

                return;
            }
            else {

                /** All successful. Create a valid response */
                const response = {
                    statusCode: 200,
                    body: JSON.stringify( data ),
                };

                callback( null, response );
            }
        })
    }
    else {

        /** Handle validation errors generated by ReplyQueryBuiler using arameters passed 
        inside the event object  */
        callback(null, {
            statusCode: 422,
            body: JSON.stringify( Query.errors )
        });
    }
};